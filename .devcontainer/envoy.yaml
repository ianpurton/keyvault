admin:
  access_log_path: /tmp/admin_access.log
  address:
    socket_address: { address: 0.0.0.0, port_value: 7101 }

static_resources:
  listeners:
  - name: listener1
    address:
      socket_address: { address: 0.0.0.0, port_value: 7100 }
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_http
          codec_type: AUTO
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains: ["*"]
              routes:
              # Sign in and registration
              - match: { prefix: "/auth" }
                route: { cluster: ext-authn }
                typed_per_filter_config:
                  envoy.filters.http.ext_authz:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                    disabled: true

              # This will catch all incoming grpc requests (based on the header) and 
              # send them to our api.
              - match: { prefix: "/", grpc: {}  }
                route: { cluster: app }
                # Disable auth
                typed_per_filter_config:
                  envoy.filters.http.ext_authz:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                    disabled: true

              # Allow gRPC web access to our server. In this case if authentication-type
              # header is set then ext auth is triggered. 
              - match: 
                  prefix: "/"
                  headers:
                    - name: "x-grpc-web"
                      exact_match: "1"
                    - name: "authentication-type"
                      exact_match: "cookie"
                route: { cluster: app }

              # Allow gRPC web access to our server - Tis is token based access to the API.
              # eally only needed as gRPC over cloudflare tunnels doesn't seem to work.
              - match: 
                  prefix: "/"
                  headers:
                    - name: "x-grpc-web"
                      exact_match: "1"
                route: { cluster: app }
                # Disable auth
                typed_per_filter_config:
                  envoy.filters.http.ext_authz:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                    disabled: true

              # Web request to our app
              - match: { prefix: "/app" }
                route: { cluster: app }

              # Paths that don't need authentication

              # Images JS, and CSS.
              - match: { prefix: "/static" }
                route: { cluster: app }
                typed_per_filter_config:
                  envoy.filters.http.ext_authz:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                    disabled: true
                    
              # Everything else passes in to here. The marketing pages
              - match: { prefix: "/" }
                route: { cluster: www }
                typed_per_filter_config:
                  envoy.filters.http.ext_authz:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                    disabled: true
     
          http_filters:
          # Convert incoming gRPC web request to proper gRPC
          - name: envoy.filters.http.grpc_web
          # Use Authn Proxy to authenticate routes.  
          - name: envoy.filters.http.ext_authz
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
              http_service:
                server_uri:
                  uri: auth:9090
                  cluster: ext-authn
                  timeout: 0.25s
                authorization_request:
                  allowed_headers:
                    patterns: 
                      - exact: "cookie"
                authorization_response:
                  allowed_upstream_headers_to_append:
                    patterns: 
                      - exact: "x-user-id"
          - name: envoy.filters.http.router

  clusters:
  # The authentication service hand /auth for UI and ext_authz
  - name: ext-authn
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    load_assignment:
      cluster_name: ext-authn
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: auth
                port_value: 9090

  # Marketing Pages
  - name: www
    connect_timeout: 1.25s
    type: strict_dns
    lb_policy: round_robin
    dns_lookup_family: V4_ONLY
    load_assignment:
      cluster_name: www
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: development
                port_value: 7104

  # The web application and api server
  - name: app
    connect_timeout: 1.25s
    type: strict_dns
    lb_policy: round_robin
    dns_lookup_family: V4_ONLY
    http2_protocol_options: {} # Add this then gRPC starts working
    load_assignment:
      cluster_name: app
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: development
                port_value: 7103