syntax = "proto3";

package vault;

service Vault {

    // These methods are called by the CLI.

    // Get a service account and all the secrets inside, we need
    // the public ecdh address of the service account.
    rpc GetServiceAccount(GetServiceAccountRequest) returns (GetServiceAccountResponse);

    // These methods are called by the front end. Authentication is
    // provided by barricade.

    // Get a vault and all the secrets inside as well as connected service accounts
    rpc GetVault(GetVaultRequest) returns (GetVaultResponse);

    // This method is called when we create a secret or when we attach a service account
    // to a vault.
    // In both cases we need to encrypt secrets and send them to 0 or more service accounts
    rpc CreateSecrets(CreateSecretsRequest) returns (CreateSecretsResponse);
}

message Secret {
    string encrypted_name = 1;
    string name_blind_index = 2;
    string encrypted_secret_value = 3;
    uint32 environment_id = 4;
}

message ServiceAccount {
    uint32 service_account_id = 1;
    uint32 environment_id = 2;
    string public_ecdh_key = 3;
}

message ServiceAccountSecrets {
    uint32 service_account_id = 1;
    repeated Secret secrets = 2;
    // The ECDH ethereal public key that was used as part of
    // the key agreement to encrypt these secrets
    string public_ecdh_key = 3;
}

message GetServiceAccountRequest {
    string ecdh_public_key = 1;
}

message ServiceAccountSecret {
    string encrypted_name = 1;
    string name_blind_index = 2;
    string encrypted_secret_value = 3;
    string ecdh_public_key = 4;
}

message GetServiceAccountResponse {
    uint32 service_account_id = 1;
    repeated ServiceAccountSecret secrets = 3;
}

message GetVaultRequest {
    uint32 vault_id = 1;
}

message GetVaultResponse {
    string name = 1;
    // The users encrypted copy of the vault key
    string user_vault_encrypted_vault_key = 2;
    // The users public ECDH key for the vault so the can
    // use a key agreement to decrypt thew vault key
    string user_vault_public_ecdh_key = 3;
    // All of the secrets encrypted with the vault key
    repeated Secret secrets = 4;
    repeated ServiceAccount service_accounts = 5;
}

message CreateSecretsRequest {
    repeated ServiceAccountSecrets account_secrets = 1;
}

message CreateSecretsResponse {
}